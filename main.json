{"meta":{"version":"0.3.3","format":20,"date":1641130497327},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/34704796/147868696-bf61c114-7b94-41fe-8421-fc9b39c094ba.png\" alt=\"Logo\">\n\n  <div>\n    <img alt=\"GitHub\" src=\"https://img.shields.io/github/license/musiccajs/musicca\">\n    <img alt=\"npm\" src=\"https://img.shields.io/npm/dt/musicca\">\n    <img alt=\"GitHub issues\" src=\"https://img.shields.io/github/issues/musiccajs/musicca\">\n  </div>\n</div>\n\n# About ðŸ“›\n\nMusicca is a **modular**, **extensible** and **flexible** media stream manager for [Node.js](https://nodejs.org/).\n\n- Object-oriented\n- Simple and light-weight\n- Modular by design\n\n# Installation ðŸ’¾\n\n```sh-session\nnpm install musicca\nyarn add musicca\npnpm add musicca\n```\n\n# Quick Start ðŸŒ \n\nInstall all required dependencies\n\n```sh-session\nnpm install musicca @musicca/structs @musicca/extractors\nyarn add musicca @musicca/structs @musicca/extractors\npnpm add musicca @musicca/structs @musicca/extractors\n```\n\nCreate a new Musicca instance\n\n```ts\nimport Musicca from 'musicca';\nimport { MemoryQueue } from '@musicca/structs';\nimport { YoutubeExtractor } from '@musicca/extractors';\n\nconst client = new Musicca<MemoryQueue>({\n  plugins: {\n    new YoutubeExtractor(/* options */)\n  },\n  structs: {\n    queue: MemoryQueue\n  }\n});\n```\n\n# Links ðŸ”—\n\n- [Website](https://musicca.edqe.me) ([source](https://github.com/musiccajs/website))\n- [Documentation](https://musicca.edqe.me/docs)\n- [Github](https://github.com/musiccajs/musicca)\n- [npm](https://www.npmjs.com/package/musicca)\n","path":"README.md"}}}},"classes":[{"name":"BasePlugin","description":"Base for all plugin types","construct":{"name":"constructor","params":[{"name":"type","description":"Plugin type","optional":false,"type":[[["PluginType"]]]},{"name":"id","optional":true,"type":[[["Nullable","<"],["string",">"]]]}],"returns":[[["default"]]],"meta":{"line":16,"file":"BasePlugin.ts","path":"src/lib/structs"}},"props":[{"name":"id","readonly":true,"type":[[["string"]]],"meta":{"line":10,"file":"BasePlugin.ts","path":"src/lib/structs"}},{"name":"type","readonly":true,"type":[[["PluginType"]]],"meta":{"line":8,"file":"BasePlugin.ts","path":"src/lib/structs"}}],"meta":{"line":7,"file":"BasePlugin.ts","path":"src/lib/structs"}},{"name":"Client","description":"Musicca client class","construct":{"name":"constructor","params":[{"name":"options","optional":false,"type":[[["ClientOptions","<"],["T",">"]]]}],"returns":[[["default","<"],["T",">"]]],"meta":{"line":24,"file":"Client.ts","path":"src/lib"}},"props":[{"name":"extractors","type":[[["ExtractorManager"]]],"meta":{"line":20,"file":"Client.ts","path":"src/lib"}},{"name":"options","readonly":true,"type":[[["ClientOptions","<"],["T",">"]]],"meta":{"line":18,"file":"Client.ts","path":"src/lib"}},{"name":"queues","type":[[["QueueManager","<"],["T",">"]]],"meta":{"line":22,"file":"Client.ts","path":"src/lib"}}],"meta":{"line":17,"file":"Client.ts","path":"src/lib"}},{"name":"Extractor","description":"Extractor plugin","see":[],"extends":["BasePlugin"],"abstract":true,"deprecated":false,"construct":{"name":"constructor","params":[{"name":"name","description":"Extractor name","optional":false,"type":[[["string"]]]},{"name":"options","optional":true,"type":[[["Nullable","<"],["T",">"]]]},{"name":"id","optional":true,"type":[[["Nullable","<"],["string",">"]]]}],"returns":[[["default","<"],["T",">"]]],"meta":{"line":28,"file":"Extractor.ts","path":"src/lib/structs"}},"props":[{"name":"id","readonly":true,"type":[[["string"]]],"meta":{"line":10,"file":"BasePlugin.ts","path":"src/lib/structs"}},{"name":"name","type":[[["string"]]],"meta":{"line":20,"file":"Extractor.ts","path":"src/lib/structs"}},{"name":"options","type":[[["Omit","<"],["T",", "],["'priority'",">"]]],"meta":{"line":22,"file":"Extractor.ts","path":"src/lib/structs"}},{"name":"priority","readonly":true,"default":"0","type":[[["number"]]],"meta":{"line":18,"file":"Extractor.ts","path":"src/lib/structs"}},{"name":"type","readonly":true,"type":[[["PluginType"]]],"meta":{"line":8,"file":"BasePlugin.ts","path":"src/lib/structs"}}],"methods":[{"name":"extract","description":"Extract input to normalized object","params":[{"name":"input","description":"Input to extract from","optional":false,"type":[[["string"]]]}],"returns":[[["Awaitable","<"],["default"," | "],["Array","<"],["default",">>"]]],"returnsDescription":"","meta":{"line":54,"file":"Extractor.ts","path":"src/lib/structs"}},{"name":"fetch","description":"Download data from url extracted from `extract` method to a `Readable` stream","params":[{"name":"url","description":"Url to download the resource","optional":false,"type":[[["string"]]]}],"returns":[[["Awaitable","<"],["Readable",">"]]],"returnsDescription":"","meta":{"line":62,"file":"Extractor.ts","path":"src/lib/structs"}},{"name":"validate","description":"Validate method to determine whether to use this extractor or not","see":[],"examples":[],"abstract":true,"deprecated":false,"emits":[],"params":[{"name":"input","description":"Input to test","optional":false,"type":[[["string"]]]}],"returns":[[["boolean"]]],"returnsDescription":"","meta":{"line":46,"file":"Extractor.ts","path":"src/lib/structs"}}],"meta":{"line":17,"file":"Extractor.ts","path":"src/lib/structs"}},{"name":"ExtractorManager","description":"Extractor manager","extends":["BasePlugin"],"construct":{"name":"constructor","params":[{"name":"client","description":"Musicca client","optional":false,"type":[[["default","<"],["default",">"]]]},{"name":"extractors","optional":true,"type":[[["Nullable","<"],["Array","<"],["default","<"],["ExtractorOptions",">>>"]]]}],"returns":[[["ExtractorManager"]]],"meta":{"line":19,"file":"ExtractorManager.ts","path":"src/lib/structs/managers"}},"props":[{"name":"client","readonly":true,"type":[[["default","<"],["default",">"]]],"meta":{"line":11,"file":"ExtractorManager.ts","path":"src/lib/structs/managers"}},{"name":"id","readonly":true,"type":[[["string"]]],"meta":{"line":10,"file":"BasePlugin.ts","path":"src/lib/structs"}},{"name":"list","readonly":true,"type":[[["Map","<"],["string",", "],["default","<"],["ExtractorOptions",">>"]]],"meta":{"line":13,"file":"ExtractorManager.ts","path":"src/lib/structs/managers"}},{"name":"type","readonly":true,"type":[[["PluginType"]]],"meta":{"line":8,"file":"BasePlugin.ts","path":"src/lib/structs"}}],"methods":[{"name":"add","description":"Add an extractor to the manager","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"extractor","description":"The extractor","optional":false,"type":[[["T"]]]}],"returns":[[["T"]]],"meta":{"line":67,"file":"ExtractorManager.ts","path":"src/lib/structs/managers"}},{"name":"all","description":"Get all available extractors","returns":[[["Map","<"],["string",", "],["default","<"],["ExtractorOptions",">>"]]],"returnsDescription":"","meta":{"line":48,"file":"ExtractorManager.ts","path":"src/lib/structs/managers"}},{"name":"extract","description":"Try to loop through all exteractor and call {@link Extractor.extract} if match","params":[{"name":"input","description":"Input to pass to extractor","optional":false,"type":[[["string"]]]}],"returns":[[["Promise","<"],["null"," | "],["default"," | "],["Array","<"],["default",">>"]]],"returnsDescription":"","meta":{"line":32,"file":"ExtractorManager.ts","path":"src/lib/structs/managers"}},{"name":"get","description":"Resolve to Extractor object","params":[{"name":"resolvable","description":"Extractor to resolve","optional":false,"type":[[["ExtractorResolvable"]]]}],"returns":[[["Nullable","<"],["T",">"]]],"returnsDescription":"","meta":{"line":94,"file":"ExtractorManager.ts","path":"src/lib/structs/managers"}},{"name":"getId","description":"Resolve to Extractor's ID","params":[{"name":"resolvable","description":"Extractor to resolve","optional":false,"type":[[["ExtractorResolvable"]]]}],"returns":[[["undefined"," | "],["string"]]],"returnsDescription":"","meta":{"line":107,"file":"ExtractorManager.ts","path":"src/lib/structs/managers"}},{"name":"remove","description":"Remove extractor from the manager","params":[{"name":"resolvable","description":"Extractor to remove","optional":false,"type":[[["ExtractorResolvable"]]]}],"returns":[[["Nullable","<"],["T",">"]]],"returnsDescription":"","meta":{"line":80,"file":"ExtractorManager.ts","path":"src/lib/structs/managers"}},{"name":"values","description":"Get all extractor as an array, sorted by its priority","returns":[[["Array","<"],["default","<"],["ExtractorOptions",">>"]]],"returnsDescription":"","meta":{"line":56,"file":"ExtractorManager.ts","path":"src/lib/structs/managers"}}],"meta":{"line":10,"file":"ExtractorManager.ts","path":"src/lib/structs/managers"}},{"name":"Media","description":"Media constructor","extends":["BasePlugin"],"construct":{"name":"constructor","params":[{"name":"extractor","optional":false,"type":[[["default","<"],["ExtractorOptions",">"]]]},{"name":"url","description":"Media url","optional":false,"type":[[["string"]]]},{"name":"data","description":"Media data","optional":false,"type":[[["MediaData"]]]},{"name":"id","optional":true,"type":[[["Nullable","<"],["string",">"]]]}],"returns":[[["default"]]],"meta":{"line":30,"file":"Media.ts","path":"src/lib/structs"}},"props":[{"name":"data","readonly":true,"type":[[["MediaData"]]],"meta":{"line":24,"file":"Media.ts","path":"src/lib/structs"}},{"name":"extractor","readonly":true,"type":[[["default","<"],["ExtractorOptions",">"]]],"meta":{"line":20,"file":"Media.ts","path":"src/lib/structs"}},{"name":"id","readonly":true,"type":[[["string"]]],"meta":{"line":10,"file":"BasePlugin.ts","path":"src/lib/structs"}},{"name":"type","readonly":true,"type":[[["PluginType"]]],"meta":{"line":8,"file":"BasePlugin.ts","path":"src/lib/structs"}},{"name":"url","readonly":true,"type":[[["string"]]],"meta":{"line":22,"file":"Media.ts","path":"src/lib/structs"}}],"methods":[{"name":"fetch","description":"Fetch media stream","returns":[[["Promise","<"],["Readable",">"]]],"returnsDescription":"","meta":{"line":43,"file":"Media.ts","path":"src/lib/structs"}},{"name":"resolve","description":"Resolve media resolvable to its media object","scope":"static","params":[{"name":"client","optional":false,"type":[[["default","<"],["default",">"]]]},{"name":"resolvable","description":"","optional":false,"type":[[["MediaResolvable"]]]}],"returns":[[["Awaitable","<"],["Nullable","<"],["default"," | "],["Array","<"],["default",">>>"]]],"returnsDescription":"","meta":{"line":63,"file":"Media.ts","path":"src/lib/structs"}}],"meta":{"line":19,"file":"Media.ts","path":"src/lib/structs"}},{"name":"MusiccaError","extends":["Error"],"construct":{"name":"constructor","params":[{"name":"name","optional":false,"type":[[["'MISSING","_"],["ARGUMENT'"," | "],["'INVALID","_"],["QUEUE","_"],["STRUCT'"," | "],["'DUPLICATE","_"],["EXTRACTOR'"," | "],["'DUPLICATE","_"],["QUEUE'"]]]},{"name":"instance","optional":false,"type":[[["T"]]]}],"returns":[[["default","<"],["T",">"]]],"meta":{"line":12,"file":"MusiccaError.ts","path":"src/lib/structs"}},"props":[{"name":"instance","readonly":true,"type":[[["T"]]],"meta":{"line":10,"file":"MusiccaError.ts","path":"src/lib/structs"}},{"name":"message","type":[[["string"]]],"meta":{"line":1023,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"name","type":[[["string"]]],"meta":{"line":1022,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"stack","type":[[["string"]]],"meta":{"line":1024,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"prepareStackTrace","scope":"static","type":[[["("],["err",": "],["Error",", "],["stackTraces",": "],["Array","<"],["CallSite",">) => "],["any"]]],"meta":{"line":11,"file":"globals.d.ts","path":"node_modules/@types/node"}},{"name":"stackTraceLimit","scope":"static","type":[[["number"]]],"meta":{"line":13,"file":"globals.d.ts","path":"node_modules/@types/node"}},{"name":"types","scope":"static","readonly":true,"type":[[["{"],["\nDUPLICATE","_"],["EXTRACTOR",": "],["'Extractor"," "],["with"," "],["the"," "],["same"," "],["ID"," "],["already"," "],["exist'",","],["\nDUPLICATE","_"],["QUEUE",": "],["'Queue"," "],["with"," "],["the"," "],["same"," "],["ID"," "],["already"," "],["exist'",","],["\nINVALID","_"],["QUEUE","_"],["STRUCT",": "],["'Invalid"," "],["queue"," "],["structure'",","],["\nMISSING","_"],["ARGUMENT",": "],["'Missing"," "],["a"," "],["required"," "],["argument'\n","}"]]],"meta":{"line":19,"file":"MusiccaError.ts","path":"src/lib/structs"}}],"methods":[{"name":"captureStackTrace","description":"Create .stack property on a target object","scope":"static","params":[{"name":"targetObject","optional":false,"type":[[["object"]]]},{"name":"constructorOpt","optional":true,"type":[[["Function"]]]}],"returns":[[["void"]]]}],"meta":{"line":9,"file":"MusiccaError.ts","path":"src/lib/structs"}},{"name":"Queue","description":"Queue class","see":[],"extends":["BasePlugin"],"abstract":true,"deprecated":false,"construct":{"name":"constructor","params":[{"name":"manager","optional":false,"type":[[["QueueManager","<"],["default",">"]]]},{"name":"id","optional":true,"type":[[["string"]]]}],"returns":[[["default"]]],"meta":{"line":17,"file":"Queue.ts","path":"src/lib/structs"}},"props":[{"name":"id","readonly":true,"type":[[["string"]]],"meta":{"line":10,"file":"BasePlugin.ts","path":"src/lib/structs"}},{"name":"manager","readonly":true,"type":[[["QueueManager","<"],["default",">"]]],"meta":{"line":10,"file":"Queue.ts","path":"src/lib/structs"}},{"name":"position","default":"-1","type":[[["number"]]],"meta":{"line":12,"file":"Queue.ts","path":"src/lib/structs"}},{"name":"type","readonly":true,"type":[[["PluginType"]]],"meta":{"line":8,"file":"BasePlugin.ts","path":"src/lib/structs"}}],"methods":[{"name":"add","description":"Add a media or an array of medias to the queue","params":[{"name":"media","description":"Media(s) to add","optional":false,"type":[[["T"]]]},{"name":"position","optional":true,"type":[[["number"]]]}],"returns":[[["Awaitable","<"],["T",">"]]],"returnsDescription":"","meta":{"line":37,"file":"Queue.ts","path":"src/lib/structs"}},{"name":"all","description":"Get all queue list in array","returns":[[["Awaitable","<"],["Array","<"],["default",">>"]]],"returnsDescription":"","meta":{"line":28,"file":"Queue.ts","path":"src/lib/structs"}},{"name":"clear","description":"Clear the queue","returns":[[["Awaitable","<"],["void",">"]]],"meta":{"line":58,"file":"Queue.ts","path":"src/lib/structs"}},{"name":"current","description":"Get currently playing media","returns":[[["Promise","<"],["Nullable","<"],["default",">>"]]],"returnsDescription":"","meta":{"line":97,"file":"Queue.ts","path":"src/lib/structs"}},{"name":"get","description":"Get a media based on the position","params":[{"name":"position","description":"","optional":false,"type":[[["number"]]]}],"returns":[[["Awaitable","<"],["Nullable","<"],["default",">>"]]],"returnsDescription":"","meta":{"line":45,"file":"Queue.ts","path":"src/lib/structs"}},{"name":"indexOf","description":"Get index of the media (Similar to {@link Array.indexOf})","params":[{"name":"media","description":"Media reference","optional":false,"type":[[["default"]]]}],"returns":[[["Awaitable","<"],["number",">"]]],"meta":{"line":64,"file":"Queue.ts","path":"src/lib/structs"}},{"name":"next","description":"Get next media object","returns":[[["Promise","<"],["Nullable","<"],["default",">>"]]],"returnsDescription":"","meta":{"line":106,"file":"Queue.ts","path":"src/lib/structs"}},{"name":"play","description":"Play a media directly or from the queue","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"resolvable","description":"Media resolvable (`number` to reference the media in the list)","optional":false,"type":[[["number"," | "],["MediaResolvable"]]]}],"returns":[[["Promise","<"],["Readable",">"]]],"meta":{"line":126,"file":"Queue.ts","path":"src/lib/structs"}},{"name":"previous","description":"Get previus media object","returns":[[["Promise","<"],["Nullable","<"],["default",">>"]]],"returnsDescription":"","meta":{"line":81,"file":"Queue.ts","path":"src/lib/structs"}},{"name":"remove","description":"Remove a media based on the position","params":[{"name":"position","description":"","optional":false,"type":[[["number"]]]}],"returns":[[["Awaitable","<"],["Nullable","<"],["default",">>"]]],"returnsDescription":"","meta":{"line":53,"file":"Queue.ts","path":"src/lib/structs"}},{"name":"resolveMedia","access":"private","params":[{"name":"resolvable","optional":false,"type":[[["number"," | "],["MediaResolvable"]]]}],"returns":[[["Promise","<"],["Nullable","<"],["default",">>"]]],"meta":{"line":137,"file":"Queue.ts","path":"src/lib/structs"}},{"name":"size","description":"Get queue list length","returns":[[["Promise","<"],["number",">"]]],"returnsDescription":"","meta":{"line":71,"file":"Queue.ts","path":"src/lib/structs"}}],"meta":{"line":9,"file":"Queue.ts","path":"src/lib/structs"}},{"name":"QueueManager","description":"Queue manager","extends":["BasePlugin"],"construct":{"name":"constructor","params":[{"name":"struct","optional":false,"type":[[["Constructor","<"],["T",">"]]]},{"name":"client","description":"Musicca client","optional":false,"type":[[["default","<"],["default",">"]]]},{"name":"queues","optional":true,"type":[[["Nullable","<"],["Array","<"],["T",">>"]]]}],"returns":[[["QueueManager","<"],["T",">"]]],"meta":{"line":24,"file":"QueueManager.ts","path":"src/lib/structs/managers"}},"props":[{"name":"client","readonly":true,"type":[[["default","<"],["default",">"]]],"meta":{"line":14,"file":"QueueManager.ts","path":"src/lib/structs/managers"}},{"name":"id","readonly":true,"type":[[["string"]]],"meta":{"line":10,"file":"BasePlugin.ts","path":"src/lib/structs"}},{"name":"list","readonly":true,"type":[[["Map","<"],["string",", "],["T",">"]]],"meta":{"line":16,"file":"QueueManager.ts","path":"src/lib/structs/managers"}},{"name":"struct","access":"private","readonly":true,"type":[[["Constructor","<"],["T",">"]]],"meta":{"line":18,"file":"QueueManager.ts","path":"src/lib/structs/managers"}},{"name":"type","readonly":true,"type":[[["PluginType"]]],"meta":{"line":8,"file":"BasePlugin.ts","path":"src/lib/structs"}},{"name":"Struct","description":"Get default queue constructor set on initiating","readonly":true,"type":[[["Constructor","<"],["T",">"]]],"meta":{"line":38,"file":"QueueManager.ts","path":"src/lib/structs/managers"}}],"methods":[{"name":"add","description":"Add an queue to the manager","see":[],"examples":[],"abstract":false,"deprecated":false,"emits":[],"params":[{"name":"queue","description":"The queue","optional":false,"type":[[["T"]]]}],"returns":[[["T"]]],"meta":{"line":71,"file":"QueueManager.ts","path":"src/lib/structs/managers"}},{"name":"all","description":"Get all available queues","returns":[[["Map","<"],["string",", "],["T",">"]]],"returnsDescription":"","meta":{"line":46,"file":"QueueManager.ts","path":"src/lib/structs/managers"}},{"name":"create","description":"Create a new queue","params":[{"name":"id","optional":true,"type":[[["string"]]]}],"returns":[[["T"]]],"returnsDescription":"","meta":{"line":57,"file":"QueueManager.ts","path":"src/lib/structs/managers"}},{"name":"get","description":"Resolve to queue object","params":[{"name":"resolvable","description":"Queue to resolve","optional":false,"type":[[["QueueResolvable","<"],["T",">"]]]}],"returns":[[["Nullable","<"],["T",">"]]],"returnsDescription":"","meta":{"line":98,"file":"QueueManager.ts","path":"src/lib/structs/managers"}},{"name":"getId","description":"Resolve to queue's ID","params":[{"name":"resolvable","description":"Queue to resolve","optional":false,"type":[[["QueueResolvable","<"],["T",">"]]]}],"returns":[[["undefined"," | "],["string"]]],"returnsDescription":"","meta":{"line":111,"file":"QueueManager.ts","path":"src/lib/structs/managers"}},{"name":"remove","description":"Remove queue from the manager","params":[{"name":"resolvable","description":"Queue to remove","optional":false,"type":[[["QueueResolvable","<"],["T",">"]]]}],"returns":[[["Nullable","<"],["T",">"]]],"returnsDescription":"","meta":{"line":84,"file":"QueueManager.ts","path":"src/lib/structs/managers"}}],"meta":{"line":13,"file":"QueueManager.ts","path":"src/lib/structs/managers"}}],"typedefs":[{"name":"MediaData","meta":{"line":6,"file":"Media.ts","path":"src/lib/structs"},"props":[{"name":"description","optional":true,"type":[[["string"]]]},{"name":"duration","optional":true,"type":[[["number"]]]},{"name":"quality","optional":true,"type":[[["string"," | "],["number"]]]},{"name":"source","optional":true,"type":[[["string"]]]},{"name":"thumbnail","optional":true,"type":[[["string"]]]},{"name":"title","optional":false,"type":[[["string"]]]}]},{"name":"ExtractorResolvable","type":[[["Extractor"," | "],["string"]]],"meta":{"line":5,"file":"ExtractorManager.ts","path":"src/lib/structs/managers"}},{"name":"MediaResolvable","type":[[["Queue"," | "],["Media"," | "],["string"]]],"meta":{"line":6,"file":"QueueManager.ts","path":"src/lib/structs/managers"}},{"name":"QueueResolvable","type":[[["T"," | "],["string"]]],"meta":{"line":5,"file":"QueueManager.ts","path":"src/lib/structs/managers"}}]}